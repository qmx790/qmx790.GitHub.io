<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>性能最快的代码分析工具，Ruff正在疯狂席卷Python圈</title>
    <url>/posts/230416/</url>
    <content><![CDATA[<h1 id="性能最快的代码分析工具，Ruff-正在席卷-Python-圈！"><a href="#性能最快的代码分析工具，Ruff-正在席卷-Python-圈！" class="headerlink" title="性能最快的代码分析工具，Ruff 正在席卷 Python 圈！"></a>性能最快的代码分析工具，Ruff 正在席卷 Python 圈！</h1><p>几周前，Python 开源社区又出了一个不小的新闻：HTTPX 和 Starlette 在同一天将在用的代码分析工具（flake8、autoflake 和 isort）统一替换成了 Ruff。</p>
<p>HTTPX 是一个支持异步的 HTTP 客户端，Starlette 是一个轻量级的 ASGI 框架，它们都是 Python 社区里的明星项目，目前加起来有近 20K star。它们都选择了使用 Ruff，再次扩大了 Ruff 的应用版图。</p>
<p>Ruff 是个诞生仅仅 8 个月的新兴项目，但已呈现出一种席卷 Python 社区的趋势！很多知名的开源项目已采纳 Ruff，比如 Transformers、Pandas、FastAPI、Airflow、SciPy、Bokeh、Jupyter、LangChain、PaddlePaddle、Sphinx、Pydantic、LlamaIndex……</p>
<p>Ruff 是什么？为什么它能吸引大量的开源项目使用？相比于其它代码分析工具，它有哪些突出之处，是否还有一些局限性？现在是否值得将项目在用的工具都替换成它呢？</p>
<p>带着这些问题，本文将带你全方位了解这个火爆的项目。</p>
<h1 id="Ruff-加速-Rust-与-Python-的融合"><a href="#Ruff-加速-Rust-与-Python-的融合" class="headerlink" title="Ruff 加速 Rust 与 Python 的融合"></a>Ruff 加速 Rust 与 Python 的融合</h1><p>Ruff 诞生于 2022 年 8 月，它是一个用 Rust 语言编写的高性能的 Python 静态代码分析工具，比其它分析工具快几个数量级（10-100 倍），而且功能也很全面。</p>
<p>代码分析工具 即 Linter，用于检查代码中的语法错误、编码规范问题、潜在的逻辑问题和代码质量问题等，可以提供实时反馈和自动修复建议。</p>
<p>在 Ruff 出现之前，社区里的代码分析工具呈现出百花齐放之势，比如有 Pylint、Flake8、Autoflake、Pyflakes、Pycodestyle 等等，它们的共同点是都使用 Python 编写而成。</p>
<p>Ruff 异军突起，在性能方面立于不败之地，主要得益于 Rust 天然的速度优势。Ruff 的出现，就像基于大语言模型的 ChatGPT 横空出世，所有竞争对手瞬间就黯淡失色了。</p>
<p>我现在可以补充一个观察了：用 Rust 开发的新工具将淘汰用其它语言开发的工具，而且新工具的普及速度可能比你的预想快得多！</p>
<p>Ruff 项目的成功，将刺激出更多 Python+Rust 的项目。它的作者 Charlie Marsh 立志于给 Python 构建高性能的开发工具，巧合的是我曾翻译过他写的《Using Mypy in production at Spring》，这篇文章恰好发布于 Ruff 诞生的 2022 年 8 月！</p>
<p>因此，我有理由推测：在 Ruff 项目成熟后，他将用 Rust 开发高性能的 Python 类型检查工具，到时候，目前流行的 Mypy、Pytype、Pyright 和 Pyre 等工具将迎来一大劲敌。（题外话：Python 社区纷乱繁多的虚拟环境管理工具和依赖包管理工具，也有望迎来变革了吧！）</p>
<p>他的目标是让Python生态更加高效<br>这里还必须介绍两个 Rust 项目，因为 Ruff 的成功离不开它们：</p>
<p>RustPython：用 Rust 写成的 Python 解释器。Ruff 利用了它高性能的 AST 解析器，以此实现了自己的 AST 遍历、访问器抽象和代码质量检测逻辑<br>Maturin：用 Rust 写成的打包工具，可以将 Rust 项目打包成 Python 可用的包，从而可以被我们“pip install”后使用，且不需要配置 Rust 环境</p>
<h1 id="Ruff-的优点与局限性"><a href="#Ruff-的优点与局限性" class="headerlink" title="Ruff 的优点与局限性"></a>Ruff 的优点与局限性</h1><p>介绍完最关键的特性后（速度极快、支持 pip），我们接下来看看 Ruff 的其它方面。</p>
<p>总体而言，它具有这些特点：</p>
<p>支持 pyproject.toml<br>兼容 Python 3.11<br>超过 500 条内置规则，与 Flake8 内置的规则集近乎对等<br>重新实现了数十个 Flake8 插件，如 flake8-bugbear、flake8-comprehensions 等<br>支持自动修复，可自动纠正错误（例如，删除未使用的导入）<br>内置缓存，可避免重复分析未更改的文件<br>支持 VS Code、Pycharm、Neovim、Sublime Text、Emacs 等编辑器<br>对 monorepo 友好，具有分层和级联配置</p>
<p>首先最值得介绍的是它支持的规则。Ruff 借鉴了流行的工具如 Flake8、autoflake、isort、pyupgrade、yesqa 等等，然后用 Rust 重新实现了超过 500 条规则。它本身不支持插件，但是吸收了数十个常用的 Flake8 插件的设计，使得已囊括的规则范围比其它任何工具都大。</p>
<p>实现了的部分flake8插件<br>Ruff 的作者还非常熟悉其它语言的分析工具，比如 Rust 的 Clippy 和 JavaScript 的 ESLint，并从这些项目上得到了设计上的启发。</p>
<p>Ruff 站在了多个工具&#x2F;插件的肩膀上，重新实现了它们验证过的规则，也借鉴了它们的 API 和实现细节，这使得它扮演了一种“集大成”的角色，很方便使用者们作工具的顺滑迁移。</p>
<p>Ruff 第二个值得介绍的特点是，它没有局限于 Linter 的定位，而是借鉴 Rome、Prettier 和 Black 这些代码格式化工具（Formatter），也实现了代码格式化的功能。借鉴了 Autoflake、ESLint、Fixit 等工具，实现了代码自动纠错的功能。另外，它还借鉴了使用很广泛的 isort，支持对 import 作快速排序。</p>
<p>这些表明作者的目标并不只是开发一款优秀的代码分析工具，而是在静态代码分析的核心功能外，要创造出更多的可能性。此举是开发者的福音啊，以后一个工具就能满足多种诉求，再也不必纠结于不同工具的选型、协作与维护了！</p>
<p>Ruff 还有其它的优点，例如支持 pyproject.toml 、支持 Python 3.11、支持只分析变更的文件，等等。另外，它也有着一些局限性：</p>
<p>支持的 lint 规则还有不够<br>不支持使用插件，扩展性不强<br>用 Rust 开发的，因此不便于在出错时 debug，也不便于 Python 开发者给它贡献代码</p>
<p>关于第一点，毕竟 Ruff 只是 8 个月大的新生项目，支持更多的规则，只是时间问题。至于插件带来的扩展性和编程语言的开发者生态，原因也是 Rust，属于“有得必有失”了。</p>
<p>Ruff 的使用</p>
<p>介绍完 Ruff 的整体情况后，我们接着看看该如何使用它吧。</p>
<p>首先是安装，可以用 Conda 和其它包管理工具，也可以直接用 pip：</p>
<p>pip install ruff<br>可以通过以下命令运行：</p>
<p>ruff check .                        # 分析当前及子目录内的所有文件<br>ruff check path&#x2F;to&#x2F;code&#x2F;            # 分析指定目录及子目录内的所有文件<br>ruff check path&#x2F;to&#x2F;code&#x2F;*.py        # 分析指定目录内的所有py文件<br>ruff check path&#x2F;to&#x2F;code&#x2F;to&#x2F;file.py  # 分析 file.py<br>可以用作预提交的钩子：</p>
<ul>
<li>repo: <a href="https://github.com/charliermarsh/ruff-pre-commit">https://github.com/charliermarsh/ruff-pre-commit</a><h1 id="Ruff-version"><a href="#Ruff-version" class="headerlink" title="Ruff version."></a>Ruff version.</h1>rev: &#39;v0.0.261&#39;<br>hooks:<ul>
<li>id: ruff<br>可以通过 pyproject.toml ，ruff.toml 或 .ruff.toml 文件进行配置，默认配置已能满足基本使用，详细配置可以参见文档的 Configuration 。</li>
</ul>
</li>
</ul>
<p>Ruff 提供了官方的 VS Code 插件，可以快速上手<br>Ruff 官方没有提供 Pycharm 的插件，社区中有人发布了一个 Ruff 插件。</p>
<p>另外，它还提供了ruff-lsp ，可以被集成到任何支持 Language Server Protocol 的编辑器中，例如 Neovim、Sublime Text、Emacs 等等。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文从 HTTPX 和 Starlette 采纳 Ruff 的新闻开始，向读者介绍了这个仅诞生 8 个月却俘获了一大批知名开源项目。它最突出的特点是使用 Rust 开发，因此在性能方面远远超越同类工具，此外，它借鉴了众多工具和插件的设计，不仅静态代码分析的规则全面，而且还具备代码格式化、代码自动纠错和 import 排序等非其它 linter 所拥有的功能。</p>
<p>Ruff 的成功为 Python 社区提供了一个鲜活的榜样，可以预见，我们将迎来一波用 Rust 开发的高性能工具。Ruff 的成功，与最近火爆的 ChatGPT 一样，它们传递出了一个“这事儿能成”的信号，从而会引爆一场使用新技术的变革！（非常巧合的是：Rust 1.0 在 2015 年 5 月发布，而 OpenAI 在 2015 年 12 月成立。）</p>
<p>总体而言，Ruff 非常强大，凭实力而风靡 Python 社区，绝对推荐使用！它的使用文档很友好，如果你想了解更多细节，可以去翻查。</p>
<p>好的<br>本文就到这里<br><em>如果觉得对你有帮助</em></p>
<p><em>不要忘了转发</em></p>
<p>下课！</p>
]]></content>
  </entry>
  <entry>
    <title>介绍</title>
    <url>/posts/introduction/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>咳咳<br>作为一名“只因”术大佬，必须用“只因”术来写个网站</p>
<p>作者词穷，想不出什么了，凑合着用吧</p>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>百度一搜就搜出来了</p>
<p>我使用的是hexo和github pages搭建博客<br>使用butterfly主题</p>
<p>官网在这：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>作者教程写的太详细了<br>但是<br>不推荐按照教程定制<br>（PS：不知道为什么，自己定制的总会报错，报错还没提示）<br>建议去作者的github仓库拷贝一份<br>链接：<a href="https://github.com/jerryc127/butterfly.js.org/blob/main/_config.butterfly.yml">https://github.com/jerryc127/butterfly.js.org/blob/main/_config.butterfly.yml</a></p>
<p>拷贝完之后，把它放到你博客目录的根文件夹下<br>前提你得通过npm或git等方式下载好了butterfly主题</p>
<p>完成以上动作后<br>为你后续要搭建在服务器上也方便了很多<br>我这里就不过多赘述了<br>毕竟每个人的情况都不一样<br>（PS：作者就是懒，不想写了）</p>
<p>就这样吧</p>
]]></content>
  </entry>
</search>
